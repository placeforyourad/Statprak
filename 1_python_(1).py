# -*- coding: utf-8 -*-
"""1. python (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ySL-bYw4cZAdX72i4_W6ibKfCORXk_it

<a href="https://colab.research.google.com/drive/1OMWsj9Mv4ToSGMn6TWyViCu6tEWgXdm5?usp=sharing" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
"""

!pip install nbconvert==7.16.0

"""# Introduction

Python is a great general-purpose programming language on its own, but with the help of a few popular libraries (numpy, scipy, matplotlib) it becomes a powerful environment for scientific computing.

In this tutorial, we will cover:
- Basic data types
- Functions
- Classes
"""

!python --version

import this

"""![image.png](attachment:image.png)

# Basics of Python
Python is a high-level, dynamically typed multiparadigm programming language. Python code is often said to be almost like pseudocode, since it allows you to express very powerful ideas in very few lines of code while being very readable. As an example, here is an implementation of the classic quicksort algorithm in Python:
"""

def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

print(quicksort([3,6,8,10,1,2,1]))

"""## Basic data types

### Numbers

Integers and floats work as you would expect from other languages:
"""

x = 3
print(x, type(x))

print(x + 1)   # Addition
print(x - 1)   # Subtraction
print(x * 2)   # Multiplication
print(x ** 2)  # Exponentiation

x += 1
print(x)
x *= 2
print(x)

y = 2.5
print(type(y))
print(y, y + 1, y * 2, y ** 2)

"""Note that unlike many languages, Python does not have unary increment (x++) or decrement (x--) operators.

Python also has built-in types for long integers and complex numbers; you can find all of the details in the [documentation](https://docs.python.org/3.7/library/stdtypes.html#numeric-types-int-float-long-complex).

### Booleans

Python implements all of the usual operators for Boolean logic, but uses English words rather than symbols (`&&`, `||`, etc.):
"""

t, f = True, False
print(type(t))

"""Now we let's look at the operations:"""

print(t and f) # Logical AND;
print(t or f)  # Logical OR;
print(not t)   # Logical NOT;
print(t != f)  # Logical XOR;

"""### Strings"""

hello = 'hello'   # String literals can use single quotes
world = "world"   # or double quotes; it does not matter
print(hello, len(hello))

hw = hello + ' ' + world  # String concatenation
print(hw)

hw12 = '{} {} {}'.format(hello, world, 12)  # string formatting
print(hw12)

"""String objects have a bunch of useful methods; for example:"""

s = "hello"
print(s.capitalize())  # Capitalize a string
print(s.upper())       # Convert a string to uppercase; prints "HELLO"
print(s.rjust(7))      # Right-justify a string, padding with spaces
print(s.center(7))     # Center a string, padding with spaces
print(s.replace('l', '(ell)'))  # Replace all instances of one substring with another
print('  world '.strip())  # Strip leading and trailing whitespace

"""You can find a list of all string methods in the [documentation](https://docs.python.org/3.7/library/stdtypes.html#string-methods).

## Containers

Python includes several built-in container types: lists, dictionaries, sets, and tuples.

### Lists

A list is the Python equivalent of an array, but is resizeable and can contain elements of different types:
"""

xs = [3, 1, 2]   # Create a list
print(xs, xs[2])
print(xs[-1])     # Negative indices count from the end of the list; prints "2"

xs[2] = 'foo'    # Lists can contain elements of different types
print(xs)

xs.append('bar') # Add a new element to the end of the list
print(xs)

x = xs.pop()     # Remove and return the last element of the list
print(x, xs)

"""As usual, you can find all the gory details about lists in the [documentation](https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists).

#### Slicing
In addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:
"""

nums = list(range(5))    # range is a built-in function that creates a list of integers
print(nums)         # Prints "[0, 1, 2, 3, 4]"
print(nums[2:4])    # Get a slice from index 2 to 4 (exclusive); prints "[2, 3]"
print(nums[2:])     # Get a slice from index 2 to the end; prints "[2, 3, 4]"
print(nums[:2])     # Get a slice from the start to index 2 (exclusive); prints "[0, 1]"
print(nums[:])      # Get a slice of the whole list; prints ["0, 1, 2, 3, 4]"
print(nums[:-1])    # Slice indices can be negative; prints ["0, 1, 2, 3]"
nums[2:4] = [8, 9] # Assign a new sublist to a slice
print(nums)         # Prints "[0, 1, 8, 9, 4]"

"""#### Loops

You can loop over the elements of a list like this:
"""

animals = ['cat', 'dog', 'monkey']
for animal in animals:
    print(animal)

"""If you want access to the index of each element within the body of a loop, use the built-in `enumerate` function:"""

animals = ['cat', 'dog', 'monkey']
for idx, animal in enumerate(animals):
    print('#{}: {}'.format(idx + 1, animal))

"""#### List comprehensions

When programming, frequently we want to transform one type of data into another. As a simple example, consider the following code that computes square numbers:
"""

nums = [0, 1, 2, 3, 4]
squares = []
for x in nums:
    squares.append(x ** 2)
print(squares)

"""You can make this code simpler using a list comprehension:"""

nums = [0, 1, 2, 3, 4]
squares = [x ** 2 for x in nums]
print(squares)

"""List comprehensions can also contain conditions:"""

nums = [0, 1, 2, 3, 4]
even_squares = [x ** 2 for x in nums if x % 2 == 0]
print(even_squares)

"""### Dictionaries

A dictionary stores (key, value) pairs, similar to a `Map` in Java or an object in Javascript. You can use it like this:
"""

d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data
print(d['cat'])       # Get an entry from a dictionary; prints "cute"
print('cat' in d)     # Check if a dictionary has a given key; prints "True"

d['fish'] = 'wet'    # Set an entry in a dictionary
print(d['fish'])      # Prints "wet"

print(d['monkey'])  # KeyError: 'monkey' not a key of d

print(d.get('monkey', 'N/A'))  # Get an element with a default; prints "N/A"
print(d.get('fish', 'N/A'))    # Get an element with a default; prints "wet"

del d['fish']        # Remove an element from a dictionary
print(d.get('fish', 'N/A')) # "fish" is no longer a key; prints "N/A"

"""You can find all you need to know about dictionaries in the [documentation](https://docs.python.org/2/library/stdtypes.html#dict).

It is easy to iterate over the keys in a dictionary:
"""

d = {'person': 2, 'cat': 4, 'spider': 8}
for animal, legs in d.items():
    print('A {} has {} legs'.format(animal, legs))

"""Dictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries. For example:"""

nums = [0, 1, 2, 3, 4]
even_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}
print(even_num_to_square)

"""### Sets

A set is an unordered collection of distinct elements. As a simple example, consider the following:
"""

animals = {'cat', 'dog'}
print('cat' in animals)   # Check if an element is in a set; prints "True"
print('fish' in animals)  # prints "False"

animals.add('fish')      # Add an element to a set
print('fish' in animals)
print(len(animals))       # Number of elements in a set;

animals.add('cat')       # Adding an element that is already in the set does nothing
print(len(animals))
animals.remove('cat')    # Remove an element from a set
print(len(animals))

"""_Loops_: Iterating over a set has the same syntax as iterating over a list; however since sets are unordered, you cannot make assumptions about the order in which you visit the elements of the set:"""

animals = {'cat', 'dog', 'fish'}
for idx, animal in enumerate(animals):
    print('#{}: {}'.format(idx + 1, animal))

"""Set comprehensions: Like lists and dictionaries, we can easily construct sets using set comprehensions:"""

from math import sqrt
print({int(sqrt(x)) for x in range(30)})

"""### Tuples

A tuple is an (immutable) ordered list of values. A tuple is in many ways similar to a list; one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot. Here is a trivial example:
"""

d = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys
t = (5, 6)       # Create a tuple
print(type(t))
print(d[t])
print(d[(1, 2)])

t[0] = 1

"""## Functions

Python functions are defined using the `def` keyword. For example:
"""

def sign(x):
    if x > 0:
        return 'positive'
    elif x < 0:
        return 'negative'
    else:
        return 'zero'

for x in [-1, 0, 1]:
    print(sign(x))

"""We will often define functions to take optional keyword arguments, like this:"""

def hello(name, loud=False):
    if loud:
        print('HELLO, {}'.format(name.upper()))
    else:
        print('Hello, {}!'.format(name))

hello('Bob')
hello('Fred', loud=True)

"""### $\lambda$-functions"""

f = lambda x, y: x+y-x*y
f(10, 12)

"""## Classes

### Task: Course Management System for Students

#### Description

Develop a system to manage course enrollments for students at a university. This system should allow students to enroll in courses, drop courses, and list currently enrolled courses. Additionally, the system should enable the management of course information and track the history of student enrollments and course completions.

#### Tasks

1. **`Course` Class**:
   - Attributes: course name, course code, maximum students, list of enrolled students.
   - Methods: constructor, method to add a student to the course, method to remove a student from the course, method to display course info.

2. **`Student` Class**:
   - Attributes: student name, student ID, list of enrolled courses.
   - Methods: constructor, methods for enrolling in a course, dropping a course, listing currently enrolled courses.

3. **`EnrollmentSystem` Class**:
   - Attributes: list of courses, list of students, enrollment history (which student enrolled in/dropped which course and when).
   - Methods: constructor, methods for adding and removing courses, registering and deregistering students, methods for enrolling and dropping courses for students, method to display enrollment history.

#### Assignment

1. Implement the `Course`, `Student`, and `EnrollmentSystem` classes with the specified attributes and methods.
2. Create several courses and students, and add them to the enrollment system.
3. Implement scenarios for students enrolling in and dropping courses.
4. Display the enrollment history to show the sequence of enrollments and course completions.

This task focuses on object-oriented programming principles, encouraging the practice of managing relationships between objects (courses and students) within a larger system (the enrollment system).
"""

class Course:
    def __init__(self, course_name, course_code, max_students, enrolled_students=None):
        self.course_name = course_name
        self.code = course_code
        self.max_students = max_students
        self.enrolled_students = []
        print(f"Course {course_name} created")

    def add_student(self, student):
        if len(self.enrolled_students) < self.max_students:
            self.enrolled_students.append(student)
            print(f"{student.student_name} has been enrolled in {self.course_name}")
        else:
            print("Course is full. Cannot enroll more students.")

    def remove_student(self, student):
        if student in self.enrolled_students:
            self.enrolled_students.remove(student)
            print(f"{student.student_name} has been removed from {self.course_name}")
        else:
            print(f"{student.student_name} is not enrolled in {self.course_name}")

    def display_info(self):
        print(f"Course Name: {self.course_name}")
        print(f"Course Code: {self.course_code}")
        print(f"Maximum Students: {self.max_students}")
        print("Enrolled Students:")
        for student in self.enrolled_students:
            print(f"- {student.student_name}")


class Student:
    def __init__(self, student_name, student_ID):
        self.student_name = student_name
        self.student_ID = student_ID
        self.enrolled_courses = []

    def enroll_course(self, course):
        self.enrolled_courses.append(course)
        course.add_student(self)
        print(f"{self.student_name} has enrolled in {course.course_name}")

    def drop_course(self, course):
        if course in self.enrolled_courses:
            self.enrolled_courses.remove(course)
            course.remove_student(self)
            print(f"{self.student_name} has dropped {course.course_name}")
        else:
            print(f"{self.student_name} is not enrolled in {course.course_name}")

    def list_enrolled_courses(self):
        print(f"{self.student_name} is currently enrolled in the following courses:")
        for course in self.enrolled_courses:
            print(f"- {course.course_name}")


class EnrollmentSystem:
    def __init__(self):
        self.courses = []
        self.students = []
        self.enrollment_history = []

    def add_course(self, course):
        self.courses.append(course)
        print(f"{course.course_name} has been added to the system")

    def remove_course(self, course):
        if course in self.courses:
            self.courses.remove(course)
            print(f"{course.course_name} has been removed from the system")
        else:
            print(f"{course.course_name} is not in the system")

    def register_student(self, student):
        self.students.append(student)
        print(f"{student.student_name} has been registered in the system")

    def deregister_student(self, student):
        if student in self.students:
            self.students.remove(student)
            print(f"{student.student_name} has been deregistered from the system")
        else:
            print(f"{student.student_name} is not registered in the system")

    def enroll_student_course(self, student, course):
        if student in self.students and course in self.courses:
            student.enroll_course(course)
            self.enrollment_history.append((student, course, 'enrolled'))
        else:
            print("Student or course not found in the system")

    def drop_student_course(self, student, course):
        if student in self.students and course in self.courses:
            student.drop_course(course)
            self.enrollment_history.append((student, course, 'dropped'))
        else:
            print("Student or course not found in the system")

    def display_enrollment_history(self):
        print("Enrollment History:")
        for record in self.enrollment_history:
            print(record)

system = EnrollmentSystem()

course1 = Course("Introduction to Python", "CS101", 30)
system.add_course(course1)

student1 = Student("Alice Johnson", "S1001")
system.register_student(student1)

system.enroll_student_course(student1, course1)

system.drop_student_course(student1, course1)

system.display_enrollment_history()

"""### Solution

# Homework

## Problem 1

Make a tuple containing natural numbers, the square of which is a multiple of 3, 4, but not a multiple of 8 and not exceeding 12345.
"""

result = tuple(i for i in range(1, 12346) if i*i % 3 == 0 and i*i % 4 == 0 and i*i % 8 != 0)

print(result)

"""## Problem 2

Write a function that takes a two-dimensional array and a string as input and returns an array rotated 90 degrees counterclockwise if the string 'left' was passed, and clockwise if the string 'right' was passed.

Example for input: $\begin{bmatrix} 1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9 \end{bmatrix}$.\
If the string 'left' is passed, the function should return $\begin{bmatrix} 3 & 6 & 9 \\ 2 & 5 & 8 \\ 1 & 4 & 7 \end{bmatrix}$, and if the string 'right' is passed, the function should return $\begin{bmatrix} 7 & 4 & 1 \\ 8 & 5 & 2 \\ 9 & 6 & 3 \end{bmatrix}$.
"""

def rotate_array(arr, direction):
    if direction == 'left':
        return [list(i) for i in zip(*arr)][::-1]
    elif direction == 'right':
        return [list(i)[::-1] for i in zip(*arr)]
    else:
        return "Invalid direction, please provide 'left' or 'right'."


input_array = [[1, 2, 3, 4],
               [4, 5, 6, 7],
               [7, 8, 9, 11]]

print(rotate_array(input_array, 'left'))
print(rotate_array(input_array, 'right'))

"""## Problem 3

Write a function that takes a string as input and returns a dictionary containing the number of occurrences of each character in the string.

Example for the string 'hello, world!': {'h': 1, 'e': 1, 'l': 3, 'o': 2, ',': 1, ' ': 1, 'w': 1, 'r': 1, 'd': 1, '!': 1}.
"""

def count_characters(text):
    char_count = {}

    for char in text:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    return char_count

input_string = "Hello, World!"
result = count_characters(input_string)
print(result)

"""## Problem 4

### Implementing a Library Management System

#### Description

You are required to design and implement a system for managing books and users in a library. The system should allow for the management of books (adding, deleting, searching by various criteria) and users (registration, deletion, searching), as well as tracking the history of interactions between them (issuing and returning books).

#### Tasks

1. **`Book` Class**:
   - Attributes: title, author, year of publication, ISBN, number of copies.
   - Methods: constructor, methods to get information about the book, method to change the number of copies (when issuing and returning books).

2. **`User` Class**:
   - Attributes: user name, library card number, list of borrowed books.
   - Methods: constructor, methods for user registration, methods for adding and removing books from the borrowed list.

3. **`Library` Class**:
   - Attributes: list of books, list of users, transaction history (who, when, which book was borrowed and returned).
   - Methods: constructor, methods for adding and deleting books and users, methods for issuing and returning books, searching for books and users by various criteria, method to display the transaction history.

#### Assignment

1. Implement the `Book`, `User`, and `Library` classes with the specified attributes and methods.
2. Create several books and users, and add them to the library system.
3. Implement scenarios for issuing books to users and their return.
4. Display the transaction history to show how books were issued and returned.
"""

class Book:
    def __init__(self, title, author, year, isbn, num_copies):
        self.title = title
        self.author = author
        self.year = year
        self.isbn = isbn
        self.num_copies = num_copies

    def display_info(self):
        return f"Title: {self.title}, Author: {self.author}, Year: {self.year}, ISBN: {self.isbn}, Copies: {self.num_copies}"

    def change_num_copies(self, amount):
        self.num_copies += amount

class User:
    def __init__(self, name, card_number):
        self.name = name
        self.card_number = card_number
        self.borrowed_books = []

    def register_user(self, name, card_number):
        self.name = name
        self.card_number = card_number

    def borrow_book(self, book):
        if book.num_copies > 0:
            self.borrowed_books.append(book)
            book.change_num_copies(-1)
        else:
            return "Book not available for borrowing."

    def return_book(self, book):
        if book in self.borrowed_books:
            self.borrowed_books.remove(book)
            book.change_num_copies(1)

class Library:
    def __init__(self):
        self.books = []
        self.users = []
        self.transaction_history = []

    def add_book(self, book):
        self.books.append(book)

    def delete_book(self, book):
        if book in self.books:
            self.books.remove(book)

    def add_user(self, user):
        self.users.append(user)

    def delete_user(self, user):
        if user in self.users:
            self.users.remove(user)

    def issue_book(self, user, book):
        user.borrow_book(book)
        self.transaction_history.append((user.name, book.title, "Issued"))

    def return_book(self, user, book):
        user.return_book(book)
        self.transaction_history.append((user.name, book.title, "Returned"))

    def search_book_by_title(self, title):
        return [book for book in self.books if book.title == title]

    def search_user_by_name(self, name):
        return [user for user in self.users if user.name == name]

    def display_transaction_history(self):
        for transaction in self.transaction_history:
            print(f"User: {transaction[0]}, Book: {transaction[1]}, Action: {transaction[2]}")

book1 = Book("Python Programming", "A.B.Cee", 2016, "123456789", 5)
book2 = Book("Data Structures and Algorithms", "D.F.Gee", 2018, "987654321", 3)

user1 = User("Alice", "A123")
user2 = User("Bob", "B456")

library = Library()

library.add_book(book1)
library.add_book(book2)
library.add_user(user1)
library.add_user(user2)

library.issue_book(user1, book1)
library.return_book(user1, book1)

library.display_transaction_history()

"""## Problem 5*

Explain why list `b` changes after the execution of the following code:

```python
a = [1, 2, 3]
b = [a]
a[0] = 4
print(b)
```

> Write your answer in markdown cell after:

Because we add element `a` to array `b`, and not making a copy of element. If we make it like that:

```python
a = [1, 2, 3]
b = a
a[0] = 4
print(b)
```
`b` will be [1, 2, 3]

## Problem 6*

Let
$$A = \sum_{i=1}^{10000} \frac{1}{i^2},\quad B=\sum_{i=10000}^{1} \frac{1}{i^2}.$$
Calculate the values of $A$ and $B$ and compare them. What do you observe? Explain why this happens. What is the best way to calculate the value of $\sum\limits_{i=1}^{10000} \dfrac{1}{i^2}$?
"""

# Your solution here

!pip show nbformat
!pip show nbconvert